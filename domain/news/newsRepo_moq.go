// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package news

import (
	"github.com/google/uuid"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CountFunc: func(id uuid.UUID) (int, error) {
// 				panic("mock out the Count method")
// 			},
// 			DeleteFunc: func(uUID uuid.UUID) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetAllFunc: func() ([]News, error) {
// 				panic("mock out the GetAll method")
// 			},
// 			GetByIdFunc: func(id uuid.UUID) (*News, error) {
// 				panic("mock out the GetById method")
// 			},
// 			SaveFunc: func(news News) error {
// 				panic("mock out the Save method")
// 			},
// 			UpdateFunc: func(news News) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CountFunc mocks the Count method.
	CountFunc func(id uuid.UUID) (int, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(uUID uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]News, error)

	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(id uuid.UUID) (*News, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(news News) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(news News) error

	// calls tracks calls to the methods.
	calls struct {
		// Count holds details about calls to the Count method.
		Count []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// UUID is the uUID argument value.
			UUID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// News is the news argument value.
			News News
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// News is the news argument value.
			News News
		}
	}
	lockCount   sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetById sync.RWMutex
	lockSave    sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Count calls CountFunc.
func (mock *RepositoryMock) Count(id uuid.UUID) (int, error) {
	if mock.CountFunc == nil {
		panic("RepositoryMock.CountFunc: method is nil but Repository.Count was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	mock.lockCount.Unlock()
	return mock.CountFunc(id)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//     len(mockedRepository.CountCalls())
func (mock *RepositoryMock) CountCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockCount.RLock()
	calls = mock.calls.Count
	mock.lockCount.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock) Delete(uUID uuid.UUID) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryMock.DeleteFunc: method is nil but Repository.Delete was just called")
	}
	callInfo := struct {
		UUID uuid.UUID
	}{
		UUID: uUID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(uUID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock) DeleteCalls() []struct {
	UUID uuid.UUID
} {
	var calls []struct {
		UUID uuid.UUID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *RepositoryMock) GetAll() ([]News, error) {
	if mock.GetAllFunc == nil {
		panic("RepositoryMock.GetAllFunc: method is nil but Repository.GetAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedRepository.GetAllCalls())
func (mock *RepositoryMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetById calls GetByIdFunc.
func (mock *RepositoryMock) GetById(id uuid.UUID) (*News, error) {
	if mock.GetByIdFunc == nil {
		panic("RepositoryMock.GetByIdFunc: method is nil but Repository.GetById was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(id)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//     len(mockedRepository.GetByIdCalls())
func (mock *RepositoryMock) GetByIdCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock) Save(news News) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		News News
	}{
		News: news,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(news)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedRepository.SaveCalls())
func (mock *RepositoryMock) SaveCalls() []struct {
	News News
} {
	var calls []struct {
		News News
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(news News) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		News News
	}{
		News: news,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(news)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	News News
} {
	var calls []struct {
		News News
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
